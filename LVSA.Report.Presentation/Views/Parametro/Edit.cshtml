@model LVSA.Report.Application.ViewModels.ParametroViewModel

@{
    ViewBag.Title = "Parâmetro";
    ViewBag.Description = "Editar parâmetro";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Codigo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Codigo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Codigo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mask, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mask, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mask, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Icon, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Icon, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Icon, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Regex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Regex, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Regex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Multivaloravel, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="radio-inline">
                    <label>
                        @Html.RadioButtonFor(model => model.Multivaloravel, true, htmlAttributes: new { @class = "ace" })
                        <span class="lbl"> Sim</span>
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButtonFor(model => model.Multivaloravel, false, htmlAttributes: new { @class = "ace" })
                        <span class="lbl"> Não</span>
                    </label>
                </div>
                <br />
                @Html.ValidationMessageFor(model => model.Multivaloravel)
            </div>
        </div>


        <div class="form-group">
            <label class="col-md-2"></label>
            <div class="col-md-6">
                <fieldset>
                    <legend>@Html.DisplayNameFor(model => model.Consulta)</legend>
                    @Html.TextAreaFor(model => model.Consulta, htmlAttributes: new { @id = "code-sql", @class = "form-control" })
                    <br />
                    @Html.ValidationMessageFor(model => model.Consulta, "", new { @class = "text-danger" })
                </fieldset>
            </div>
        </div>


        <div class="form-actions no-color">
            <div>
                <button type="submit" class="btn btn-primary" title="Salvar">Salvar <i class="glyphicon glyphicon-floppy-disk"></i></button> |
                <a href="@Url.Action("Index")" class="btn btn-default" title="Voltar para lista">Voltar para lista <i class="glyphicon glyphicon-arrow-left"></i></a>
            </div>
        </div>
    </div>
}


@section styles {
    <link href="~/Content/CodeMirror/css/codemirror.css" rel="stylesheet" />
    <link href="~/Content/CodeMirror/css/fullscreen.css" rel="stylesheet" />
}

@section scripts {
    <script src="~/Content/CodeMirror/js/codemirror.js"></script>
    <script src="~/Content/CodeMirror/js/fullscreen.js"></script>
    <script src="~/Content/CodeMirror/js/sql.js"></script>
    <script>

        if ($("#code-sql").length) {
            var editor = CodeMirror.fromTextArea(document.getElementById("code-sql"), {
                lineNumbers: true,
                matchBrackets: true,
                mode: "text/x-sql",
                extraKeys: {
                    "F11": function (cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function (cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                }
            });
        }

    </script>
}
